name: Devxhub Contact Automation

on:
  schedule:
    - cron: '0 */8 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_TO: ${{ secrets.EMAIL_TO }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run Playwright tests
        run: npm test
        continue-on-error: true

      - name: Generate HTML report
        if: always()
        run: |
          # Generate the standard Playwright HTML report
          npx playwright test --reporter=html || true
          # Run the custom enhanced report generator
          node reports/generate-enhanced-report.js || true
          # Zip the reports for attachment
          zip -r playwright-report.zip playwright-report || true

      - name: Upload report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report
            playwright-report.zip
            artifacts/status.json
          if-no-files-found: ignore

      - name: Debug email configuration
        if: always()
        run: |
          echo "=== Email Configuration Debug ==="
          echo "SMTP_HOST: $SMTP_HOST"
          echo "SMTP_PORT: $SMTP_PORT"
          echo "SMTP_USER: $SMTP_USER"
          echo "EMAIL_FROM: $EMAIL_FROM"
          echo "EMAIL_TO: $EMAIL_TO"
          echo "SMTP_PASS: [HIDDEN]"
          echo "================================"

      - name: Send email notification
        if: always()
        run: |
          set +e
          echo "Starting email notification..."
          SUBJECT_OK="Devxhub contact automation: OK"
          SUBJECT_BUG="BUG: Devxhub contact form not working"
          BODY_OK="Automation ran successfully. See attached HTML report."
          BODY_BUG="BUG detected in contact form submission. See attached HTML report and status.json."
          STATUS_FILE="artifacts/status.json"
          SUBJECT="$SUBJECT_OK"
          BODY="$BODY_OK"
          
          if [ -f "$STATUS_FILE" ]; then
            echo "Status file found, checking content..."
            cat "$STATUS_FILE"
            if command -v jq >/dev/null 2>&1; then
              STATUS_CODE=$(jq -r '.status // empty' "$STATUS_FILE" || echo "")
              OK=$(jq -r '.ok // false' "$STATUS_FILE" || echo "false")
            else
              echo "jq not found; defaulting OK=false"
              STATUS_CODE=""
              OK="false"
            fi
            echo "Status Code: $STATUS_CODE"
            echo "OK Status: $OK"
            if [ "$OK" != "true" ]; then
              SUBJECT="$SUBJECT_BUG (status ${STATUS_CODE})"
              BODY="$BODY_BUG"
            fi
          else
            echo "Status file not found, using default OK message"
          fi
          
          echo "Final Subject: $SUBJECT"
          echo "Final Body: $BODY"
          
          # Check if files exist before attaching
          ATTACH_ARGS=""
          if [ -f "playwright-report.zip" ]; then
            ATTACH_ARGS="$ATTACH_ARGS --attach playwright-report.zip"
            echo "Will attach: playwright-report.zip"
          fi
          if [ -f "artifacts/status.json" ]; then
            ATTACH_ARGS="$ATTACH_ARGS --attach artifacts/status.json"
            echo "Will attach: artifacts/status.json"
          fi
          
          echo "Running email command..."
          # First try without attachments to test basic email functionality
          python emailer/send_error_email.py --subject "$SUBJECT" --message "$BODY" --no-attachments || true
          echo "Email command (no attachments) completed with exit code: $?"
          
          # If that works, try with attachments
          if [ $? -eq 0 ]; then
            echo "Basic email worked, now trying with attachments..."
            python emailer/send_error_email.py --subject "$SUBJECT" --message "$BODY" $ATTACH_ARGS || true
            echo "Email command (with attachments) completed with exit code: $?"
          else
            echo "Basic email failed, skipping attachment test"
          fi




